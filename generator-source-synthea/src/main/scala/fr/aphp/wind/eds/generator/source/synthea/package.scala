// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Hadrien Chauvin

package fr.aphp.wind.eds.generator.source

import java.nio.file.Paths

import fr.aphp.wind.eds.data.GenericDataBundle
import org.apache.spark.sql.{DataFrame, SparkSession}
import org.mitre.synthea.engine.Generator
import org.mitre.synthea.engine.Generator.GeneratorOptions
import org.mitre.synthea.export.Exporter.ExporterRuntimeOptions
import org.mitre.synthea.helpers.Config

/**
  * Package to interact with the Synthea patient population generator.
  *
  * @see https://github.com/synthetichealth/synthea
  */
package object synthea {

  /**
    * A data bundle containing all the tabular data generated by synthea.
    *
    * @see https://github.com/synthetichealth/synthea/wiki/CSV-File-Data-Dictionary for the
    *      fields and schemas.
    */
  case class SyntheaDataBundle(
      patients: DataFrame,
      encounters: DataFrame,
      organizations: DataFrame,
      conditions: DataFrame,
      procedures: DataFrame,
      providers: DataFrame
  ) {
    def this(bundle: GenericDataBundle) {
      this(
        patients = bundle("patients"),
        encounters = bundle("encounters"),
        organizations = bundle("organizations"),
        conditions = bundle("conditions"),
        procedures = bundle("procedures"),
        providers = bundle("providers")
      )
    }

    /**
      * Converts the bundle with dataframes as fields to a generic bundle with dataframes
      * as map entries.
      */
    def genericBundle: GenericDataBundle = {
      GenericDataBundle(
        Map(
          "patients" -> patients,
          "encounters" -> encounters,
          "organizations" -> organizations,
          "conditions" -> conditions,
          "procedures" -> procedures,
          "providers" -> providers
        )
      )
    }
  }

  object SyntheaDataBundle {

    /**
      * Reads a Synthea data bundle from the CSV files produced by synthea.
      *
      * @param path The path to the directory containing the output of a synthea run.
      * @return The bundle.
      * @see [[generate]]
      */
    def fromCsvs(path: String): SyntheaDataBundle = {
      val spark = SparkSession.active
      new SyntheaDataBundle(
        GenericDataBundle(
          tables.par
            .map(table =>
              (
                table,
                spark.read
                  .format("csv")
                  .option("header", "true")
                  .csv(path + "/csv/" + table + ".csv")
              )
            )
            .seq
            .toMap
        )
      )
    }
  }

  /**
    * Generates a Synthea population.
    *
    * @param population The number of individuals in the generated population.
    * @return A new data bundle containing the population data.
    */
  def generate(population: Int): SyntheaDataBundle = {
    val baseDirectory = Paths.get("output").toAbsolutePath
    Config.set("exporter.baseDirectory", baseDirectory.toString)
    Config.set("exporter.csv.export", "true")
    Config.set("generate.default_population", population.toString)
    val generatorOptions = new GeneratorOptions
    val exporterRuntimeOptions = new ExporterRuntimeOptions
    exporterRuntimeOptions.yearsOfHistory = 10
    new Generator(
      generatorOptions,
      exporterRuntimeOptions
    ).run()

    SyntheaDataBundle.fromCsvs("file://" + baseDirectory)
  }

  /** The synthea tables. */
  val tables: Seq[String] = Seq(
    "patients",
    "encounters",
    "organizations",
    "conditions",
    "procedures",
    "providers"
  )
}
